// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: data.sql

package db

import (
	"context"
)

const createData = `-- name: CreateData :one
INSERT INTO data (name, email)
VALUES ($1, $2)
RETURNING id, name, email
`

type CreateDataParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateData(ctx context.Context, arg CreateDataParams) (Datum, error) {
	row := q.db.QueryRowContext(ctx, createData, arg.Name, arg.Email)
	var i Datum
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const listData = `-- name: ListData :many
SELECT id, name, email
FROM data
`

func (q *Queries) ListData(ctx context.Context) ([]Datum, error) {
	rows, err := q.db.QueryContext(ctx, listData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Datum
	for rows.Next() {
		var i Datum
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
